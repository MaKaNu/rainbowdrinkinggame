{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RainbowDrinkingGame A small pyqt app for a drinking game. You need Rainbowsix Siege to play accurate ;). Missing Features Standalone Application Usage explanation Dev explanation","title":"Introduction"},{"location":"#rainbowdrinkinggame","text":"A small pyqt app for a drinking game. You need Rainbowsix Siege to play accurate ;).","title":"RainbowDrinkingGame"},{"location":"#missing-features","text":"Standalone Application Usage explanation Dev explanation","title":"Missing Features"},{"location":"packages/rainbowdrinkinggame/","text":"rainbowdrinkinggame package Submodules rainbowdrinkinggame.rainbowdrinkinggame module Rainbow Drinking Game Main Module This module creates a pyside6 Window Application for the \u201cRainbow Drinking Game\u201d. It helps to document the player activitate for the game and exports the statistics at the end of the game as html file. Example: To run the Application just go into the root directory and call: > $ python rainbowdrinkinggame/rainbowdrinkinggame.py Todo: * add style_rc class rainbowdrinkinggame.rainbowdrinkinggame.Bridge() Bases: PySide6.QtCore.QObject create_result(players, sips, shots) the create_result method uses the given data to export the html statistics. This Method self accepts more than 5 Players but will fail in the lower called util functions. Args: players (List(str)): A List with 5 Player names sips (List(str)): A List with 5 sip statistics shots (List(str)): A List with 5 shot statistics Return type None minus(value) The minus method substracts 1 from the str input and returns the result as str. Args: value (str): A numeric uint8 string value Returns: str: The Substraction of value by 1, or \u201c0\u201d if value is already \u201c0\u201d. Return type str plus(value) The plus method adds 1 to the str input and returns the result as str. Args: value (str): A numeric uint8 string value Returns: str: The Sum of value and 1 Return type str staticMetaObject( = <PySide6.QtCore.QMetaObject object ) rainbowdrinkinggame.utils module Rainbow Drinking Game Util Functions This Module includes function which will be utilized by the Bridge Slot Methods. The functions are mainly used inside slots methods, but can also be used outside the methods. Todo: * All Fine for the moment. rainbowdrinkinggame.utils.create_markdown(player_values) This Function creates a multiline string based on a dictinary The dictionary has to follow some strict rules, since the game \u201crainbowdrinkinggame allows only 5 Players. Args: player_values (Dict[str, Union[List[str], List[int]]]): The dictinary which includes the player values: * PlayerNames * PlayerSips * PlayerShots Returns: str: a multiline markdownstyle str Return type str rainbowdrinkinggame.utils.export_markdown(md_str, path) Function to export a given markdown string to given path. Args: md_str (str): A String in Markdown Format path (Path): Path variable for the html output Return type None Module contents RainbowDrinkingGame namespace.","title":"rainbowdrinkinggame"},{"location":"packages/rainbowdrinkinggame/#rainbowdrinkinggame-package","text":"","title":"rainbowdrinkinggame package"},{"location":"packages/rainbowdrinkinggame/#submodules","text":"","title":"Submodules"},{"location":"packages/rainbowdrinkinggame/#rainbowdrinkinggamerainbowdrinkinggame-module","text":"Rainbow Drinking Game Main Module This module creates a pyside6 Window Application for the \u201cRainbow Drinking Game\u201d. It helps to document the player activitate for the game and exports the statistics at the end of the game as html file. Example: To run the Application just go into the root directory and call: > $ python rainbowdrinkinggame/rainbowdrinkinggame.py Todo: * add style_rc","title":"rainbowdrinkinggame.rainbowdrinkinggame module"},{"location":"packages/rainbowdrinkinggame/#class-rainbowdrinkinggamerainbowdrinkinggamebridge","text":"Bases: PySide6.QtCore.QObject","title":"class rainbowdrinkinggame.rainbowdrinkinggame.Bridge()"},{"location":"packages/rainbowdrinkinggame/#create_resultplayers-sips-shots","text":"the create_result method uses the given data to export the html statistics. This Method self accepts more than 5 Players but will fail in the lower called util functions. Args: players (List(str)): A List with 5 Player names sips (List(str)): A List with 5 sip statistics shots (List(str)): A List with 5 shot statistics Return type None","title":"create_result(players, sips, shots)"},{"location":"packages/rainbowdrinkinggame/#minusvalue","text":"The minus method substracts 1 from the str input and returns the result as str. Args: value (str): A numeric uint8 string value Returns: str: The Substraction of value by 1, or \u201c0\u201d if value is already \u201c0\u201d. Return type str","title":"minus(value)"},{"location":"packages/rainbowdrinkinggame/#plusvalue","text":"The plus method adds 1 to the str input and returns the result as str. Args: value (str): A numeric uint8 string value Returns: str: The Sum of value and 1 Return type str","title":"plus(value)"},{"location":"packages/rainbowdrinkinggame/#staticmetaobject-pyside6qtcoreqmetaobject-object","text":"","title":"staticMetaObject( = &lt;PySide6.QtCore.QMetaObject object )"},{"location":"packages/rainbowdrinkinggame/#rainbowdrinkinggameutils-module","text":"Rainbow Drinking Game Util Functions This Module includes function which will be utilized by the Bridge Slot Methods. The functions are mainly used inside slots methods, but can also be used outside the methods. Todo: * All Fine for the moment.","title":"rainbowdrinkinggame.utils module"},{"location":"packages/rainbowdrinkinggame/#rainbowdrinkinggameutilscreate_markdownplayer_values","text":"This Function creates a multiline string based on a dictinary The dictionary has to follow some strict rules, since the game \u201crainbowdrinkinggame allows only 5 Players. Args: player_values (Dict[str, Union[List[str], List[int]]]): The dictinary which includes the player values: * PlayerNames * PlayerSips * PlayerShots Returns: str: a multiline markdownstyle str Return type str","title":"rainbowdrinkinggame.utils.create_markdown(player_values)"},{"location":"packages/rainbowdrinkinggame/#rainbowdrinkinggameutilsexport_markdownmd_str-path","text":"Function to export a given markdown string to given path. Args: md_str (str): A String in Markdown Format path (Path): Path variable for the html output Return type None","title":"rainbowdrinkinggame.utils.export_markdown(md_str, path)"},{"location":"packages/rainbowdrinkinggame/#module-contents","text":"RainbowDrinkingGame namespace.","title":"Module contents"},{"location":"packages/tests/","text":"tests package Submodules tests.test_rainbowdrinkinggame module Test module for rainbowdrinkinggame. tests.test_rainbowdrinkinggame.test_bridge_create_result(mocker) tests.test_rainbowdrinkinggame.test_bridge_minus() tests.test_rainbowdrinkinggame.test_bridge_plus() tests.test_rainbowdrinkinggame.test_project_info() Test author value. tests.test_rainbowdrinkinggame.test_qml_globals() Test QML Specific Global Variables tests.test_utils module Pytest: utils modules tests.test_utils.test_create_markdown_generel() tests.test_utils.test_create_markdown_less_players() tests.test_utils.test_create_markdown_less_shots() tests.test_utils.test_create_markdown_less_sips() tests.test_utils.test_export_markdown_generel(fs) Module contents tests namespace.","title":"tests"},{"location":"packages/tests/#tests-package","text":"","title":"tests package"},{"location":"packages/tests/#submodules","text":"","title":"Submodules"},{"location":"packages/tests/#teststest_rainbowdrinkinggame-module","text":"Test module for rainbowdrinkinggame.","title":"tests.test_rainbowdrinkinggame module"},{"location":"packages/tests/#teststest_rainbowdrinkinggametest_bridge_create_resultmocker","text":"","title":"tests.test_rainbowdrinkinggame.test_bridge_create_result(mocker)"},{"location":"packages/tests/#teststest_rainbowdrinkinggametest_bridge_minus","text":"","title":"tests.test_rainbowdrinkinggame.test_bridge_minus()"},{"location":"packages/tests/#teststest_rainbowdrinkinggametest_bridge_plus","text":"","title":"tests.test_rainbowdrinkinggame.test_bridge_plus()"},{"location":"packages/tests/#teststest_rainbowdrinkinggametest_project_info","text":"Test author value.","title":"tests.test_rainbowdrinkinggame.test_project_info()"},{"location":"packages/tests/#teststest_rainbowdrinkinggametest_qml_globals","text":"Test QML Specific Global Variables","title":"tests.test_rainbowdrinkinggame.test_qml_globals()"},{"location":"packages/tests/#teststest_utils-module","text":"Pytest: utils modules","title":"tests.test_utils module"},{"location":"packages/tests/#teststest_utilstest_create_markdown_generel","text":"","title":"tests.test_utils.test_create_markdown_generel()"},{"location":"packages/tests/#teststest_utilstest_create_markdown_less_players","text":"","title":"tests.test_utils.test_create_markdown_less_players()"},{"location":"packages/tests/#teststest_utilstest_create_markdown_less_shots","text":"","title":"tests.test_utils.test_create_markdown_less_shots()"},{"location":"packages/tests/#teststest_utilstest_create_markdown_less_sips","text":"","title":"tests.test_utils.test_create_markdown_less_sips()"},{"location":"packages/tests/#teststest_utilstest_export_markdown_generelfs","text":"","title":"tests.test_utils.test_export_markdown_generel(fs)"},{"location":"packages/tests/#module-contents","text":"tests namespace.","title":"Module contents"},{"location":"rules/basic/","text":"The Rainbow Drinking Rules The game rules a very simple but... DISCLAIMER: The Developers has no responsibility and are not liable for special or consequential damages resulting from the use, misuse, inability to use or interpretation of the contents of this product regardless of whether the developers have been advised of the possibility of such damages. ... or in simple words: be an adult and know your limits ;) The Rainbow Drinking Game is a real life DLC for the shooting game \"Rainbow Six Siege\" from Ubisoft. But it could also be \"installed\" to every 5-man-squad shooting game. In general this DLC is compatible with a lot of other games but the rules and the application are specific invented for \"Rainbow Six Siege\". Feel free to contribute and use the application for other games. Basics The game is really simple. Each Player has to take sips or shots for different events which will happen during the shooting game. A few events have to be applied ad hoc while others would be applied after each round. And one special Event after a hole game. One Player will be the Statistic Accountant. This Player is responsible for entering the sips and shots into the app. How to use the app Events ad hoc Event Result teamkill 1 shot selfkill 1 shot teamdamage 1 sip per 10 HP trigger a \"Frost Trap\" 1 shot? trigger a \"Kapkan Trap\" 3 sips shot at \"Alibi Gemini\" 1 sip get roasted by enemy 1 sip get \"Fuzed\" 1 sip die by \"Twitch drone\" 1 shot die by \"Maestro cam\" 3 sips get interrogated by \"Caveira\" 3 sips lose your drone to \"Mozzie\" 1 sip lose your \"Twitch drone\" to \"Mozzie\" 3 sips \"IQ\" screams 1 sip for every player getting spawn killed 3-5 sips getting killed if you try to spawnkill 1 shot Every player who applies these Events is responsible to apply them ad hoc and tries as good as possible to remeber the count of sips/shots until the end of a round. Events after each Round After each round every player has the possibility to distribute the kills taken in the round as sips to the other players. If a player scores an Ace, every other player takes a shot . If a player has successfully planted the bomb he can distribute 3 additional sips . If a player achieves successfully a spawnkill he can distribute 3 additional sips . The Accountant ask the player for the result of the event which are applied ad hoc in the recently ended round and enters the values into the app. Special Event After a Game If the Players lose a Game and are unable to win at least one round, each player take 5 sips.","title":"Basic"},{"location":"rules/basic/#the-rainbow-drinking-rules","text":"The game rules a very simple but... DISCLAIMER: The Developers has no responsibility and are not liable for special or consequential damages resulting from the use, misuse, inability to use or interpretation of the contents of this product regardless of whether the developers have been advised of the possibility of such damages. ... or in simple words: be an adult and know your limits ;) The Rainbow Drinking Game is a real life DLC for the shooting game \"Rainbow Six Siege\" from Ubisoft. But it could also be \"installed\" to every 5-man-squad shooting game. In general this DLC is compatible with a lot of other games but the rules and the application are specific invented for \"Rainbow Six Siege\". Feel free to contribute and use the application for other games.","title":"The Rainbow Drinking Rules"},{"location":"rules/basic/#basics","text":"The game is really simple. Each Player has to take sips or shots for different events which will happen during the shooting game. A few events have to be applied ad hoc while others would be applied after each round. And one special Event after a hole game. One Player will be the Statistic Accountant. This Player is responsible for entering the sips and shots into the app. How to use the app","title":"Basics"},{"location":"rules/basic/#events-ad-hoc","text":"Event Result teamkill 1 shot selfkill 1 shot teamdamage 1 sip per 10 HP trigger a \"Frost Trap\" 1 shot? trigger a \"Kapkan Trap\" 3 sips shot at \"Alibi Gemini\" 1 sip get roasted by enemy 1 sip get \"Fuzed\" 1 sip die by \"Twitch drone\" 1 shot die by \"Maestro cam\" 3 sips get interrogated by \"Caveira\" 3 sips lose your drone to \"Mozzie\" 1 sip lose your \"Twitch drone\" to \"Mozzie\" 3 sips \"IQ\" screams 1 sip for every player getting spawn killed 3-5 sips getting killed if you try to spawnkill 1 shot Every player who applies these Events is responsible to apply them ad hoc and tries as good as possible to remeber the count of sips/shots until the end of a round.","title":"Events ad hoc"},{"location":"rules/basic/#events-after-each-round","text":"After each round every player has the possibility to distribute the kills taken in the round as sips to the other players. If a player scores an Ace, every other player takes a shot . If a player has successfully planted the bomb he can distribute 3 additional sips . If a player achieves successfully a spawnkill he can distribute 3 additional sips . The Accountant ask the player for the result of the event which are applied ad hoc in the recently ended round and enters the values into the app.","title":"Events after each Round"},{"location":"rules/basic/#special-event-after-a-game","text":"If the Players lose a Game and are unable to win at least one round, each player take 5 sips.","title":"Special Event After a Game"}]}